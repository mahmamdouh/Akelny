services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: akelny-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: akelny
      POSTGRES_USER: akelny_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-akelny_secure_password_2024}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    networks:
      - akelny-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U akelny_user -d akelny"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: akelny-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-akelny_redis_password_2024}
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"
    networks:
      - akelny-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: akelny-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: akelny
      DB_USER: akelny_user
      DB_PASSWORD: ${DB_PASSWORD:-akelny_secure_password_2024}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-akelny_redis_password_2024}
      JWT_SECRET: ${JWT_SECRET:-akelny_jwt_secret_key_2024_very_secure}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-akelny_refresh_secret_key_2024_very_secure}
      CORS_ORIGIN: https://akelny.nabd-co.com,http://localhost:3000
    volumes:
      - ./backend/uploads:/app/uploads
      - backend_logs:/app/logs
    ports:
      - "3001:3000"
    networks:
      - akelny-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: akelny-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
      - nginx_logs:/var/log/nginx
    networks:
      - akelny-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SSL Certificate Management
  certbot:
    image: certbot/certbot
    container_name: akelny-certbot
    restart: "no"
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email admin@nabd-co.com --agree-tos --no-eff-email -d akelny.nabd-co.com
    networks:
      - akelny-network

  # Monitoring - Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: akelny-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - akelny-network
    profiles:
      - monitoring

  # Monitoring - Grafana (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: akelny-grafana
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - akelny-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  akelny-network:
    driver: bridge